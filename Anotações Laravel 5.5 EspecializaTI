1) Vá até o site do Laradock:
https://laradock.io/

2) Clone o Laradock dentro do diretório do seu projeto:
git clone https://github.com/Laradock/laradock.git

3) Crie um arquivo .env a partir do env-example e faça as modificações necessárias de BD e etc...

4) Dentro do diretório Laradock execute o comando com as imagens necessárias, 
use http://localhost:8080 Servidor: mysql
Usuário: root
Senha: rootpara entrar no Mysql

docker-compose up -d nginx mysql phpmyadmin

5) Dentro de nginx/site crie um arquivo .conf. Ex: app1.conf, com as configurações:

server {
    listen 80;(porta que está riodaado a aplicação)
    listen [::]:80;(porta que será escutada)

    server_name app1.dev;(nome da aplicação)
    root /var/www/app1; (localização da aplicação)
    index index.php index.html index.htm;(tipos de arquivos que vai ler)

    location / {
         try_files $uri $uri/ /index.php$is_args$args;
    }(configurações de leitura do php)

    location ~ \.php$ {
        try_files $uri /index.php =404;
        fastcgi_pass php-upstream;
        fastcgi_index index.php;
        fastcgi_buffers 16 16k;
        fastcgi_buffer_size 32k;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        #fixes timeouts
        fastcgi_read_timeout 600;
        include fastcgi_params;
    }
}

6) No arquivo de hosts, adicione o virtual host local da sua aplicação:
127.0.0.1 app1.dev

7) Após adicionar os virtual host, dentro do diretório Laradock, restarte os containers:
docker-compose restart

8) Clone os layouts necessários para o diretório do projeto
https://github.com/especializati/layout-dashboard-free
https://github.com/especializati/layout-agencia-turismo

9) Crie os arquivos .conf na diretório nginx/sites dos dois layouts
layoutdashboard.conf
layoutturismos.conf

10) Crie os virtuais hosts de cada um no arquivo etc/hosts

11) Crie o BD (no MySQL)
-show databases; (Mostra os BDs)

-create database agencia_turismo CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci; (Cria um BD)

-use agencia_turismo;(Seleciona um BD)

-show tables;(Mostra as Tabelas)

12) Dentro do diretório Laradock, acessar o container de workspace e executar o comando:
docker-compose exec workspace bash 

13) Instalar o Laravel dentro do wokspace, execute o comando:
composer create-project --prefer-dist laravel/laravel laravel55 "5.5.*"

14) Depois de instalado o Laravel, acesse o diretório dele e abra o arquivo .env no editor. 
- Crie o virtual host do projeto em APP_URL

15) Abra config/app.php
- Altere o 'timezone' para  'America/Sao_Paulo'

16) Crie o arquivo .conf em laradock/nginx/sites

server {
    listen 80;
    listen [::]:80;

    server_name agencia-turismo.test;
    root /var/www/laravel55/public; 
    index index.php index.html index.htm;

    location / {
         try_files $uri $uri/ /index.php$is_args$args;
    }

    location ~ \.php$ {
        try_files $uri /index.php =404;
        fastcgi_pass php-upstream;
        fastcgi_index index.php;
        fastcgi_buffers 16 16k;
        fastcgi_buffer_size 32k;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        #fixes timeouts
        fastcgi_read_timeout 600;
        include fastcgi_params;
    }
}

17) Adicione o server_name no arquivo etc/hosts

18) Agora acesse o diretório laradock e restarte os containers
docker-compose restart

19) Com os containers em pé, dentro do diretório laradock\laravel55 execute o comando:
docker-compose exec workspace bash

20) Entre no diretório onde está o projeto (laravel55) e crie as migrations e as respectivas models com o comando:
php artisan make:model Models\\Brand -m

21) Fazer as configurações do BD no .env:
DB_CONNECTION=mysql
DB_HOST=mysql
DB_PORT=3306
DB_DATABASE=agencia_turismo
DB_USERNAME=root
DB_PASSWORD=root

22) Depois configurar as configurações de chasrset e collation em app/Providers\AppServiceProvider.php conforme config/database do BD que vc vai usar. Geralmente o padrão é:
'charset' => 'utf8mb4',
'collation' => 'utf8mb4_unicode_ci',

Insira: 

use Illuminate\Support\Facades\Schema;
public function boot()
{
    Schema::defaultStringLength(191);
}

23) Depois de tudo configurado, rode o comando:
php artisan migrate

O problema é porque o laradock/ está configurado para trabalhar com a versão 8 do MYSQL, e essa versão tem alguns problemas de compatibilidade com o PHP.

Siga estes passos:
// Destruir os containers:
docker-compose down

// Listar as imagens
docker images

// Remova todas as imagens do MYSQL (mais importante!)
docker rmi IDIMAGE_AQUI

// Delela o diretório:
~/.laradock/data

No arquivo .env do laradock/ deixa a versão 5.7:
MYSQL_VERSION=5.7

// Recria o container com a imagem nova:
docker-compose build mysql

// Por último, suba novamente os containers:
docker-compose up -d nginx mysql phpmyadmin

// Verifica se está tudo OK:
docker ps

24)Criar migrations e models dentro de um diretório personalizado(Models) dentro do wokspace de laradock\laravel55 execute o comando:
php artisan make:make:model Models\\NomedaModel -m

25)Criar controllers dentro de um diretório personalizado(Models) dentro do wokspace de laradock\laravel55 execute o comando:
php artisan make:controller NomedoDiretório\\Nomeda\Controller

26)Cria os itens de autenticação automaticamente, dentro do wokspace de laradock\laravel55 execute o comando:
php artisan make:auth

27)Para testar recuperar senha, criar um email fake, necessita cadstrar uma conta no https://mailtrap.io/. Depois de criar alterar as inforamções no arquivo .env com os dados do mailtrap:

MAIL_DRIVER=smtp
MAIL_HOST=smtp.mailtrap.io
MAIL_PORT=2525
MAIL_USERNAME=98b5821d2330a7
MAIL_PASSWORD=b57f591527dae2
MAIL_ENCRYPTION=tls

Crie as constantes no arquivo .env com dados para especificar quem está enviando o email:
MAIL_FROM_ADDRESS=marcelinhobarth@gmail.com
MAIL_FROM_NAME='Marcelo Barth'

28)Criar uma controller com todos os métodos REST, dentro do wokspace de laradock\laravel55 execute o comando:
php artisan make:controller Panel\\BrandController --resource

29)Em seguida é só adicionar a rota resource:
Routes::resource('panel/brands', 'Panel\BrandController');

30)Use prefixo para várias rotas com o mesmo namespace:
Route::group(['prefix' => 'panel', 'namespace' => 'Panel'], function () {
    Route::resource('brands', 'BrandController');
    Route::get('/', 'PanelController@index')->name('panel');
});

31)Sempre adicionar o token de validação no form:
 <form class="form form-search form-ds" action="{{route('brands.store')}}" method="post">
      {!! csrf_field() !!}

32)Crie na Model um fillable com os campos que podem ser preenchidos, ou guarded, com os campos q não podem ser preeenchidos.
protected $fillable = ['name'];

33)Na controller posso fazer um redirecionamento com uma mensagem de confirmação ou erro após uma ação:
if ($this->brand->create($dataForm))
            return redirect()
                ->route('brands.index')
                ->with('success', 'Cadastro realizado com sucesso!');
        else
            return redirect()->back()->with('error', 'Falha ao cadastrar!');


34)Para criar uma Request Validator, dentro do wokspace de laradock\laravel55 execute o comando:
php artisan make:request BrandStoreUpdateFormRequest

Em authorize, mude para return true, e em rules adicione as validações:

public function rules()
    {
        return [
            'name' => 'required|min:3|max:100|unique:brands',
        ];
    }

Na Controller de um use App\Http\Requests\BrandStoreUpdateFormRequest, e faça a DI no método store.

Adicone uma div na page que quer exibir os errors:
@if(isset($errors) && $errors->any())
    <div class="alert alert-warning">
        <ul>
            @foreach ($errors->all() as $error)
            <li>{{$error}}</li>
            @endforeach
        </ul>
    </div>
    @endif

35)Para recuperar um parâmetro pela URL, use segment:

use Request;

public function rules()
    {
        $id = Request::segment(3);

        return [
            'name' => "required|min:3|max:100|unique:brands,name,{$id},id",
        ];
    }

36)Instalar o pacote Laravel Collective para construir e lidar com formulários. Dentro do wokspace de laradock\laravel55 execute o comando:

composer require "laravelcollective/html":"^5.4.0"

Apartir do Laravel 5.5 não é necessário registrar os providers e aliases por conta do recurso "package auto-discovery".

Podemos agora substituir isso:
<form class="form form-search form-ds" action="{{route('brands.update', $brand->id)}}" method="POST">
Por isso:
{!! Form::model($brand, ['route' => ['brands.update', $brand->id], 'class' => 'form form-search form-ds', 'method' => 'PUT']) !!}

E isso:
<form class="form form-search form-ds" action="{{route('brands.store')}}" method="POST">
Por isso:
{!! Form::open(['route' => 'brands.store', 'class' => 'form form-search form-ds']) !!}

E isso:
<input type="text" value= "{{old('name')}}" name="name" placeholder="Nome:" class="form-control">
Por isso:
{!! Form::text('name', null, ['class' => 'form-control', 'placeholder' => 'Nome']) !!}

37) Para criar paginação, use o método paginate() na controller, ou crie um método na model para servir essas função, em seguida use o método links(), para exibir a paginação em uma view.

38) Para preservar os dados do filtro e passá-los para a próxima página de paginação use o appends?

@if(isset($dataForm))
    {!! $brands->appends($dataForm)->links() !!}
@else
    {!! $brands->links() !!}
@endif

39)Para fazer tratamentos pode-se utilizar Mutators do Laravel. Para tratar data retornada, por ex, na Model crio um método, ou como um helper. Mais exemplos em https://blog.especializati.com.br/mutators-no-laravel/

public function getDateAttribute($value)
    {
        return Carbon::parse($value)->format('d/m/Y');
    }

40)Use if para retornar mensagens:

if ($brand->delete())
    return redirect()
        ->route('brands.index')
        ->with('success', 'Deletado com sucesso!');
else
            return redirect()->back()->with('error', 'Falha ao deletar!');

41)Use pluck para retornar somente os atributos que deseja:

$airports = Airport::pluck('name', 'id');

42) Use withInput() que permite devolver os valores que foram preenchidos anteriormente no form em caso de erro.

return redirect()
    ->back()
    ->with('error', 'Falha ao cadastrar')
    ->withInput();

43)Para Upload de imagens:
a)Terá de ter setado o valor 'files' => true na abertura do form, q é equivalente a multipart-data.
b)No Form o input deverá ser do tipo file:
{!! Form::file('image', ['class' => 'form-control']) !!}

c)No arquivo config/filesystems, setar aonde o arquivo será salvo. Pode setar qual driver quer usar:

'default' => env('FILESYSTEM_DRIVER', 'public'),

disks' => [

        'public' => [
            'driver' => 'local',
            'root' => storage_path('app/public'),
            'url' => env('APP_URL').'/storage',
            'visibility' => 'public',
        ],

Então ficará em storage/app/public

44)Para criar um link para public do projeto, dentro do wokspace de laradock\laravel55 execute o comando:
php artisan storage:link

Em seguida para ver o link storage:
ls -la public/

44)O método prepend() funciona como um placeholder, segundo parâmetro é um value:
public function index()
    {
        $title = 'Voos disponíveis';

        $flights = $this->flight->getItems();

        $airports = Airport::pluck('name','id');
        $airports->prepend('Escolha o aeroporto', '');

        return view('panel.flights.index', compact('title', 'flights', 'airports'));
    }

45)Quando usar o método with() para trazer os relacionamentos de uma model e quisernos pegar outro relacionamento de uma destas models, podemos buscar assim:
 $reserves = $this->reserve->with(['user', 'flight.origin.name'])->paginate($this->totalPage);
Assim irá trazer o atributo nome do método de relacionamento origin() da model flight.

46)Para ver a SQL da consulta montada, use o método toSql() */
$flights = $this->where(function ($query) use ($request) {
    if ($request->code)
        $query->where('id', $request->code);

    if ($request->date)
        $query->where('date', '>=', $request->date);

    if ($request->hour_output)
        $query->where('hour_output', $request->hour_output);

    if ($request->total_stops)
        $query->where('total_stops', $request->total_stops);

    if ($request->origin)
        $query->where('airport_origin_id', $request->origin);

    if ($request->destination)
        $query->where('airport_destination_id', $request->destination);
})->toSql();

    dd($flights);

return $flights;

47) O primeiro parâmetro, que é um objeto $reserve, dentro do array Form::model, mantém os capos preenchidos em caso de erro no edit.

    {!! Form::model($reserve, ['route' => ['reserves.update', $reserve->id], 'class' => 'form form-search form-ds', 'method' => 'PUT']) !!}
    <div class="form-group">
        <label for="status">Status</label>
        {!! Form::select('status', $status, null, ['class' => 'form-control']) !!}
    </div>
    {!! Form::close() !!}

48) Usando join para unir tabelas:

public function search($request, $totalPage = 3)
    {
        /*
        $this->where(function($query) use ($request) {
            if ($request->date)

        })->paginate($totalPage);
        */
        $reserves = $this->join('users', 'users.id', '=', 'reserves.user_id') // Ligando as tabelas relacionadas
            ->join('flights', 'flights.id', '=', 'reserves.flight_id') // Ligando as tabelas relacionadas
            ->select('reserves.*', 'users.name as user_name', 'users.email as user_email', 'users.id as user_id', 'flights.id as flight_id', 'flights.date as flight_date') // Pegando os campos das tabelas que eu quero e apelidando os campos para evitar erros. No index tbm tem que mudar para os campos para os apelidos
            ->where(function ($query) use ($request) {
                if ($request->user) {
                    $dataUser = $request->user;
                    $query->where(function ($qr) use ($dataUser) {
                        $qr->where('users.name', 'LIKE', "%{$dataUser}%");
                        $qr->orWhere('users.email', $dataUser);
                    });
                }

                if ($request->date)
                    $query->where('flights.date', '=', $request->date);

                if ($request->reserve)
                    $query->where('reserves.id', $request->reserve);
            })
            ->where('reserves.status', $request->status)
            ->paginate($totalPage);

        return $reserves;

49) Criar uma validação personalizada, ou uma Request personalizada, dentro do wokspace de laradock\laravel55 execute o comando:
php artisan make:rule CheckAvailableFlight
